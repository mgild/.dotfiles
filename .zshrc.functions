#   my_ps: List processes owned by my user:
#   ------------------------------------------------------------
my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }


#  Show symlinks in given directory
#   -----------------------------------------------------
function lsym() {
    for link in $(find ${1:-"$(pwd)"} -maxdepth 1 -type l); do
        echo "$link -> $(readlink $link)";
    done;
}

min() {
    ((($1 < $2)) && echo $1) || echo $2
}
# Quick up n levels
# Requires: n >= 0
up() {
    # default to 1
    declare -i d=${@:-1};
    # ensure non-negative
    (($d < 0)) && (>&2 echo "up: Error: negative value provided") && return 1;
    # remove last d directories from pwd, append "/" in case result is empty
    cd "$(pwd | sed -E 's;(/[^/]*){0,'$d'}$;;')/";
}

# Better man
# Find man page for builtin commands easily
# If not a builtin, works like normal man
man() {
    vartype=$(type "$@");
    if [[ $vartype == *"shell builtin" || $vartype == *"reserved word" ]]; then
        command man zshbuiltins | less -p "^       $@ ";
    else
        command man "$@";
    fi;
}

#   A good way to be annoying
#   ------------------------------------------------------------
export BLINK_START='\033[5m'
export BLINK_END='\033[0m'
blink() {
    echo -en $BLINK_START
    while IFS= read -r line; do
        echo -e $line | sed 's/'$(echo "\[0m")/$(echo "\[0m$BLINK_START")'/g';
    done
}


# Security checks
alias checkrootkits="sudo rkhunter --update; sudo rkhunter --propupd; sudo rkhunter --check"

# nullpointer url shortener
short() {
    if [[ -z $1 ]]; then
        return 1;
    fi
    link=$(curl -s -F"shorten=$*" https://0x0.st | sed 's;https://;;g')
    echo $link "copied to clipboard" && printf $link | pbcopy
}

#   weather: pass your city or zip code, and it returns the weather!
#   USAGE - weather cleveland
#         OR
#         weather 44106
#   WARNING - city and zip code args may yield inaccurate/different results.
#   ------------------------------------------------------
weather() { curl wttr.in/"$1"; }

# split string into multiple lines(array). Supports regex
split(){
    awk -F "$1" '{ for (i=1; i<=NF;++i){print $i;} }'
}

# join input lines on pattern
join() {
    sep=''
    while read data; do
        echo -n $sep$data;
        sep=$1;
    done;
    echo;
}

isset() {
    which "$@" &> /dev/null
}

# run commands in the background
background() {
    nohup zsh -c "$@" &
}

grep_dir() {
    grep -RnisI "$@" * --color=always
}

qaz() {
    echo 'q w e rt | yu i o p'
    echo 'a s d fg | hj k l ;'
    echo 'z x c vb | nm , . /'
}

color_test() {
    range=($(echo {1..7} {30..36} {40..47} {90..97} {100..107} | split ' '))
    echo "Code 0 (color reset): [0m"
    for i in $range; echo -e "\e[${i}m Code: $i -- [${i}m\e[0m"
}
