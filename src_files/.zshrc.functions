#   my_ps: List processes owned by my user:
#   ------------------------------------------------------------
my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }


#  Show symlinks in given directory
#   -----------------------------------------------------
function lsym() {
    for link in $(find ${1:-"$(pwd)"} -maxdepth 1 -type l); do
        echo "$link -> $(readlink $link)";
    done;
}

#  Show directories in given directory (including symlink dirs)
#   -----------------------------------------------------
function lsd() {
    ls -p | grep / --color=never;
}

min() {
    ((($1 < $2)) && echo $1) || echo $2
}

# Quick up n levels
# Requires: n >= 0
up() {
    # default to 1
    declare -i d=${@:-1};
    # ensure non-negative
    (($d < 0)) && (>&2 echo "up: Error: negative value provided") && return 1;
    # remove last d directories from pwd, append "/" in case result is empty
    cd "$(pwd | sed -E 's;(/[^/]*){0,'$d'}$;;')/";
}

zman() {
    PAGER="less -g -s '+/^       "$1" '" command man zshall
}

# Better man
# Find man page for builtin commands easily
# If not a builtin, works like normal man
man() {
    vartype=$(type "$@");
    command man "$@" 2>& /dev/null && return 0
    if [[ $vartype == *"shell builtin" || $vartype == *"reserved word" ]]; then
        zman | less -p "^       $@ ";
        return 0
    fi;
    return 1
}

# Security checks
alias checkrootkits="sudo rkhunter --update; sudo rkhunter --propupd; sudo rkhunter --check"

# split string into multiple lines(array). Supports regex
split(){
    awk -F "$1" '{ for (i=1; i<=NF;++i){print $i;} }'
}

# join input lines on pattern
join() {
    sep=''
    while read data; do
        echo -n $sep$data;
        sep=$1;
    done;
    echo;
}

# run commands in the background
background() {
    nohup bash -c "$@" &
}

qaz() {
    echo 'q w e rt | yu i o p'
    echo 'a s d fg | hj k l ;'
    echo 'z x c vb | nm , . /'
}

code_test() {
    range=($(echo {1..7} {30..36} {40..47} {90..97} {100..107} | split ' '))
    echo "Code 0 (color reset): [0m"
    for i in $range; print "\e[${i}mCode: $i -- [${i}m\e[0m"
}

color_test () {
    for code in {000..255}; do
        print -P -- "$code: %F{$code}Test%f %K{$code}Test%k";
    done
}

#   Colorize ls (tries GNU ls colorize then non-GNU)
#   -----------------------------------------------------
function ls() {
    command ls --color=auto $@ 2>& /dev/null || command ls -FG $@;
}

function termcolors () {
    print TERM
    print -P "Foreground: >█<"
    print -P "Background: >%S█%s<\n"
    print "      0 1 2 3 4 5 6 7"
    for b (0 1)
    do
        printf "%d %2d " $b $(( 8 * b ))
        for r (0 1 2 3 4 5 6 7)
        do
            c=$(( 8 * b + r ))
            print -nP "%K{$c}  %k"
        done
        printf " %2d\n" $(( 8 * b + 7 ))
    done

    print

    print RGB
    for r (0 1 2 3 4 5)
    do
        print "$r $(( 16 + 36 * r )) - $(( 16 + 36 * r + 35 ))\n       0 1 2 3 4 5"
        for g (0 1 2 3 4 5)
        do
            printf "%d %3d " $g $(( 16 + 36 * r + 6 * g ))
            for b (0 1 2 3 4 5)
            do
                c=$(( 16 + 36 * r + 6 * g + b ))
                print -nP "%K{$c}  %k"
            done
            printf " %3d\n" $(( 16 + 36 * r + 6 * g + 5))
        done
        print
    done

    print

    print GRAY
    for g in $(seq 0 23)
    do
        c=$(( 232 + g ))
        printf "%2d %3d " $g $c
        print -P "%K{$c}  %k"
    done
}


map_hops(){
    iponmap -t $(sudo mtr -r -b -l $1  2> /dev/null |\
        grep '^h' |\
        sed 's/.* //g' |\
        join ' '
    );
}

# Get number of visible characters in a string
num_visible(){
    t=$(echo "$1" | perl -pe 's/\x1b\[[^m]+m//g')
    echo ${#t}
}

# fairly slow
get_cursor_row() {
    exec < /dev/tty;
    oldstty=$(stty -g);
    stty raw -echo min 0;
    echo -en "\033[6n" > /dev/tty;
    IFS=';' read -r -d R -A pos;
    stty $oldstty;
    echo ${pos[1]:2}
}

gen_MAC() {
    s=""; repeat 6; do echo -n "$s"; printf "%02X" "$(( $RANDOM % 256 ))"; s=":"; done;
    echo
}

randomize_MAC() {
    set_MAC "$(gen_MAC)";
}

set_MAC() {
    sudo ifconfig en0 ether "$1";
    sudo ifconfig en0 down;
    sudo ifconfig en0 up;
}

# g4 info
get_g4set() {
    g4 set $1
}

find_owners() {
    local cwd=`pwd`
    while true; do
        ls 'OWNERS' &> /dev/null && pwd && cat OWNERS
        if [[ `pwd` == '/' ]]; then
            cd $cwd
            return;
        fi;
        cd ..
    done
}

git_root() {
    git rev-parse --show-toplevel
}

# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# fbr - checkout git branch (including remote branches)
fbrr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fcoc - checkout git commit
fcoc() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

let_it_snow() {
    which lolcat &> /dev/null || sudo apt-get install lolcat
    ruby -e 'C=`stty size`.scan(/\d+/)[1].to_i;S=["2743".to_i(16)].pack("U*");a={};puts "\033[2J";loop{a[rand(C)]=0;a.each{|x,o|;a[x]+=1;print "\033[#{o};#{x}H \033[#{a[x]};#{x}H#{S} \033[0;0H"};$stdout.flush;sleep 0.1}' 2&> /dev/null | lolcat
}

fix_ssh() {
    eval $(ssh-agent -s)
}

j() {
    if [[ "$#" -ne 0 ]]; then
        cd $(autojump $@)
        return
    fi
    cd "$(autojump -s | \
        sed '/^_____/Q; s/^[0-9,.:]*\s*//' | \
        fzf --height 40% --nth 1.. --reverse --inline-info +s --tac --query "${*##-* }" )"
}

g4base() {
    pwd | grep '/google3/' &> /dev/null || return
    cd $(pwd | sed 's/google3\/.*$/google3/')
}

unalias z 2> /dev/null
z() {
  [ $# -gt 0 ] && _z "$*" && return
  cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
}
