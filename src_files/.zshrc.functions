#  Show symlinks in given directory
#   -----------------------------------------------------
function lsym() {
    for link in $(find ${1:-"$(pwd)"} -maxdepth 1 -type l); do
        echo "$link -> $(readlink $link)";
    done;
}

#  Show directories in given directory (including symlink dirs)
#   -----------------------------------------------------
function lsd() {
    ls -p | grep / --color=never;
}

min() {
    ((($1 < $2)) && echo $1) || echo $2
}

# Quick up n levels
# Requires: n >= 0
up() {
    # default to 1
    declare -i d=${@:-1};
    # ensure non-negative
    (($d < 0)) && (>&2 echo "up: Error: negative value provided") && return 1;
    # remove last d directories from pwd, append "/" in case result is empty
    cd "$(pwd | sed -E 's;(/[^/]*){0,'$d'}$;;')/";
}

# cd to selected directory
into() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null |
                  sed 's;^\./;;' |
                  grep -v "^\.$" |
                  fzf +s --height "40%" --reverse) &&
  cd "$dir"
}

zman() {
    PAGER="less -g -s '+/^       "$1" '" command man zshall
}

# split string into multiple lines(array). Supports regex
split(){
    awk -F "$1" '{ for (i=1; i<=NF;++i){print $i;} }'
}

# join input lines on pattern
join() {
    sep=''
    while read data; do
        echo -n $sep$data;
        sep=$1;
    done;
    echo;
}

# run commands in the background
background() {
    nohup bash -c "$@" &
}

qaz() {
    echo 'q w e rt | yu i o p'
    echo 'a s d fg | hj k l ;'
    echo 'z x c vb | nm , . /'
}

code_test() {
    range=($(echo {1..7} {30..36} {40..47} {90..97} {100..107} | split ' '))
    echo "Code 0 (color reset): [0m"
    for i in $range; do print "\e[${i}mCode: $i -- [${i}m\e[0m"; done
}

color_test () {
    for code in {000..255}; do
        print -P -- "$code: %F{$code}Test%f %K{$code}Test%k";
    done
}

unalias ls &> /dev/null
function ls() {
    command ls -Xp --group-directories-first --color=auto $@
}

function termcolors () {
    print TERM
    print -P "Foreground: >█<"
    print -P "Background: >%S█%s<\n"
    print "      0 1 2 3 4 5 6 7"
    for b (0 1)
    do
        printf "%d %2d " $b $(( 8 * b ))
        for r (0 1 2 3 4 5 6 7)
        do
            c=$(( 8 * b + r ))
            print -nP "%K{$c}  %k"
        done
        printf " %2d\n" $(( 8 * b + 7 ))
    done

    print

    print RGB
    for r (0 1 2 3 4 5)
    do
        print "$r $(( 16 + 36 * r )) - $(( 16 + 36 * r + 35 ))\n       0 1 2 3 4 5"
        for g (0 1 2 3 4 5)
        do
            printf "%d %3d " $g $(( 16 + 36 * r + 6 * g ))
            for b (0 1 2 3 4 5)
            do
                c=$(( 16 + 36 * r + 6 * g + b ))
                print -nP "%K{$c}  %k"
            done
            printf " %3d\n" $(( 16 + 36 * r + 6 * g + 5))
        done
        print
    done

    print

    print GRAY
    for g in $(seq 0 23)
    do
        c=$(( 232 + g ))
        printf "%2d %3d " $g $c
        print -P "%K{$c}  %k"
    done
}

# Get number of visible characters in a string
num_visible(){
    t=$(echo "$1" | perl -pe 's/\x1b\[[^m]+m//g')
    echo ${#t}
}

gen_MAC() {
    s=""; repeat 6; do echo -n "$s"; printf "%02X" "$(( $RANDOM % 256 ))"; s=":"; done;
    echo
}

randomize_MAC() {
    set_MAC "$(gen_MAC)";
}

set_MAC() {
    sudo ifconfig en0 ether "$1";
    sudo ifconfig en0 down;
    sudo ifconfig en0 up;
}

# g4 info
get_g4set() {
    g4 set $1
}

find_owners() {
    local cwd=`pwd`
    while true; do
        ls 'OWNERS' &> /dev/null && pwd && cat OWNERS
        if [[ `pwd` == '/' ]]; then
            cd $cwd
            return;
        fi;
        cd ..
    done
}

git_root() {
    git rev-parse --show-toplevel
}

# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

fix_ssh() {
    eval $(ssh-agent -s)
}


g4base() {
  if ! is_in_g3; then
    echo "Run from a google3 dir"
    return 1
  fi
  cd "$(citc_root)/google3"
}

unalias z 2> /dev/null;
z() {
    j $@
}

j() {
    if [[ "$#" -ne 0 ]]; then
        cd "$(autojump $@)"
        return
    fi
    local dir="$(autojump -s |
        sed '/_____/Q; s,'${HOME}',~,' |
        sort -n -k1,1 -r |
        fzf --height 40% --reverse --inline-info |
        sed 's/^[0-9,.:]*\s*//')"
    cd "$(eval echo $dir)"
}

p4_pending_status() {
  local changed=0
  local added=0
  local deleted=0
  for opened in $(p4 opened 2&> /dev/null |
        awk -F " - " '{print $2}' |
        awk '{print $1}'); do
      if [[ $opened == "edit" ]];then
          (( changed+=1 ))
      elif [[ $opened == "add" ]];then
          (( added+=1 ))
      elif [[ $opened == "delete" ]];then
          (( deleted+=1 ))
      fi
  done
  [[ $added > 0 ]] && echo -n "%F{34}+$added%f"
  [[ $changed > 0 ]] && echo -n "%F{142}~$changed%f"
  [[ $deleted > 0 ]] && echo -n "%F{124}-$deleted%f"
}


git_super_duper_status() {
    [[ "$GIT_BRANCH" != ":" ]] && print $@ "$(git_super_status)"
}

vcs_info() {
    p4_prompt_info $@ || git_super_duper_status $@
}

function nav() {
    type highlight &> /dev/null || sudo apt-get install highlight
    type fzf &> /dev/null || sudo apt-get install fzf
    while true; do
        local lsd=($(echo ".." && ls -Xp --group-directories-first))
        local sel="$(printf '%s\n' ${lsd[@]} |
            fzf --reverse --preview '
                __nav_nxt="$(echo {})";
                __nav_path="$(echo $(pwd)/${__nav_nxt} | sed "s;//;/;")";
                if [ -d "$__nav_nxt" ]; then
                    echo $__nav_path;
                    echo;
                    ls -Xp --group-directories-first --color=always "${__nav_path}";
                else
                    echo $__nav_path;
                    highlight "$__nav_nxt" --out-format xterm256 --line-numbers --force --style=solarized-dark
                fi
        ')"
        [[ ${#sel} != 0 ]] || return 0
        if [ -d "$sel" ]; then
            builtin cd "$sel" &> /dev/null
        else
            ${EDITOR:-vim} "$sel"
        fi
    done
}

export BOOKMARKS=~/bookmarks
abm() {
    touch "$BOOKMARKS"
    pwd >> "$BOOKMARKS"
    sort -u -o "$BOOKMARKS" "$BOOKMARKS"
}

dbm() {
    touch "$BOOKMARKS"
    cat "$BOOKMARKS" | grep -v "^$(pwd)$" > "$BOOKMARKS"
}

bm() {
    type fzf &> /dev/null || sudo apt-get install fzf
    touch "$BOOKMARKS"
    cd "$(cat "$BOOKMARKS" | fzf --height 40% --reverse --inline-info)"
}

export GBOOKMARKS=~/gbookmarks
gabm() {
    if ! is_in_g3; then
      echo "Run from a google3 dir"
      return 1
    fi
    local client_name="$(p4 --format %Client% client -o | awk -F: '{print $2}')"
    file="${GBOOKMARKS}.${client_name}"
    if [[ ${$#} > 1  && "$1" == "-g" ]]; then
      file="$GBOOKMARKS"
    fi
    touch "$file"
    local gpath="$(pwd | sed 's;^.*/google3[/]*;;')"
    # if [[ ${#gpath} == 0 ]]; then
      # return 1;
    # fi
    echo $gpath >> "$file"
    sort -u -o "$file" "$file"
}

gdbm() {
    if ! is_in_g3; then
      echo "Run from a google3 dir"
      return 1
    fi
    local client_name="$(p4 --format %Client% client -o | awk -F: '{print $2}')"
    file="${GBOOKMARKS}.${client_name}"
    if [[ ${$#} -ge 1 && "$1" == "-g" ]]; then
      file="$GBOOKMARKS"
    fi
    touch "$file"
    local gpath="$(pwd | sed 's;^.*/google3/;;')"
    local newbms="$(cat "$file" | grep -v "^$gpath$")"
    echo "$newbms" | grep -v "^$" > "$file"
}

gbm() {
    if ! is_in_g3; then
      echo "Run from a google3 dir"
      return 1
    fi
    type fzf &> /dev/null || sudo apt-get install fzf
    local client_name="$(p4 --format %Client% client -o | awk -F: '{print $2}')"
    client_bms="${GBOOKMARKS}.${client_name}"
    touch "$GBOOKMARKS"
    touch "$client_bms"
    local bms=""
    query="$1"
    if [[ "$1" == "-a" ]]; then
      query="$2"
      bms+="$(cat $GBOOKMARKS*)"
    elif [[ "$1" == "-g" ]]; then
      query="$2"
      bms+="$(cat $GBOOKMARKS)"
    fi
    bms+=$(echo && cat "$client_bms")

    local basepath="$(pwd | sed 's;/google3/.*$;/google3/;')"
    local chosen="$(echo $bms | grep -vE '^$' | sort -u | fzf -q "$query" --height 40% --reverse --inline-info --preview "ls -Xp --group-directories-first --color=always ${basepath}/{}")"
    if [[ ${#chosen} == 0 ]]; then
      return 1;
    fi
    cd "$basepath/$chosen"
}



powerline_font_test() {
    echo -e "Powerline glyphs:\n\
        Code points Glyphe  Description                Old code point
        U+E0A0      \xee\x82\xa0       Version control branch     (U+2B60 \xe2\xad\xa0 )\n\
        U+E0A1      \xee\x82\xa1       LN (line) symbol           (U+2B61 \xe2\xad\xa1 )\n\
        U+E0A2      \xee\x82\xa2       Closed padlock             (U+2B64 \xe2\xad\xa4 )\n\
        U+E0B0      \xee\x82\xb0       Rightwards black arrowhead (U+2B80 \xe2\xae\x80 )\n\
        U+E0B1      \xee\x82\xb1       Rightwards arrowhead       (U+2B81 \xe2\xae\x81 )\n\
        U+E0B2      \xee\x82\xb2       Leftwards black arrowhead  (U+2B82 \xe2\xae\x82 )\n\
        U+E0B3      \xee\x82\xb3       Leftwards arrowhead        (U+2B83 \xe2\xae\x83 )\n\
        "
}

#   Make tmux auto reattach if it can
#   -----------------------------------------------------
t() {
    type tmux &> /dev/null || sudo apt-get install tmux
    type fzf &> /dev/null || sudo apt-get install fzf
    type tmx2 &> /dev/null || alias tmx2=tmux # for non-corp
    local clients="$(tmux ls -F "#S" 2> /dev/null | grep -v '^$')";
    if [[ ${#} == 0 && $(echo -n "$clients" | wc -l) > 0 ]]; then
      tmx2 a -t "$(echo $clients | fzf -1 --height 15% --reverse)"
      return
    fi
    local session_name="${1:-0}"
    tmx2 a -t $session_name > /dev/null || tmx2 new -s $session_name
}

bat() {
    highlight $@ --out-format xterm256 --line-numbers --force --style=solarized-dark
}

p() {
    if ! ps -p $SSH_AGENT_PID > /dev/null; then
        echo "Refreshing ssh agent"
        eval "$(ssh-agent -s)"
    fi
    prodaccess
}

# fup - cd to selected parent directory
fup() {
  local declare dirs=()
  get_parent_dirs() {
    if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
    if [[ "${1}" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo $_dir; done
    else
      get_parent_dirs $(dirname "$1")
    fi
  }
  local DIR=$(get_parent_dirs $(realpath "${1:-$(dirname $PWD)}") | fzf --height 20% )
  cd "$DIR"
}

bb() {
    blaze build $(blaze query :all | fzf)
}

summation() {
    awk '{s+=$1} END {print s}'
}

ru() {
    yes | repo upload . --cbr $@ && echo
}

# using ripgrep combined with preview
# find-in-file - usage: fif <searchTerm>
fif() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

g4diff() {
  g4 diff | colordiff | less
}

vg4o() {
  $EDITOR "$(g4 o | awk -F "#" '{print $1}' | fzf)"
}
citc_root() {
  p4 --format '%clientRoot%' info
}

g4odirs() {
  if ! is_in_g3; then
    echo "Run from a google3 dir"
    return 1
  fi
  basepath="$(citc_root)/google3/"
  cd "$(g4 o | awk -F'#' '{print $1}' | sed 's;//depot/google3/;;g' | xargs dirname |
    sort -u | fzf --preview "ls --color=always ${basepath}/{}")"
}

rgf() {
  local file_line="$(rg -n . | fzf $@ --reverse | awk -F: '{printf("%s:%s", $1, $2)}')"
  local file="$(echo $file_line | awk -F: '{print $1}')"
  declare -i line="$(echo $file_line | awk -F: '{print $2}')"
  if [[ ${#file} == 0 ]]; then
    return
  fi
  vim +$line "$file"
}

