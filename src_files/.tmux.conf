set -g mouse on
set -g status on

set-option -g history-limit 10000 # extended pane histories

bind '|' split-window -h -c '#{pane_current_path}'  # Split panes vertically
bind '"' split-window -v -c '#{pane_current_path}'  # Split panes horizontally
bind c new-window -c '#{pane_current_path}' # Create new window

# bindfor fast resizing (can hold arrow keys too)
bind -n C-S-Up resize-pane -U 1
bind -n C-S-Down resize-pane -D 1
bind -n C-S-Left resize-pane -L 1
bind -n C-S-Right resize-pane -R 1

# Use vim keybindings in copy mode
setw -g mode-keys vi
# fix mouse scrolling
bind -n WheelUpPane if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
        'send -Mt=' 'if-shell -Ft= "#{alternate_on}" \
        "send -t= Up" "copy-mode -et="'
bind -n WheelDownPane if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
        'send -Mt=' 'if-shell -Ft= "#{alternate_on}" \
        "send -t= Down" "send -Mt="'

# smart pane switching with awareness of vim splits
bind -n C-Left run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-Down run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-Up run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-Right run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# set key as the prefix key combination
set -g prefix C-a
# bind C-b to previous window
bind b previous-window

# set border color for active pane
set-option -g pane-active-border-fg blue

# Tell tmux that Prefix+a should send the prefix key to the program running in
# the current pane.
# Useful since Ctrl+a usually jumps to beginning of line but we remapped that
# key. Now you can press `<prefix> + a` to do so.
bind a send-prefix

# set pane border formats
set -wg pane-border-status top
set -g pane-border-fg '#4d5057'
set -g pane-border-format '\
#[bold]\
 #(zsh ~/.dotfiles/tmux_scripts/vcs.sh "#{pane_current_path}")\
  \
#(zsh ~/.dotfiles/tmux_scripts/path.sh "#{pane_current_path}")\
  \
#{pane_current_command} \
'

# # The statusbar {
set -g status-interval 1
set -g status-left-length 1000
set -g status-right-length 1000
set -g status-position bottom
set -g status-justify left
set -g status-bg colour235

set -g status-left '\
#[fg=colour241,bg=colour176,bold] #S #[default,fg=colour176,bold]\
#[default] #{?client_prefix,#[fg=colour3],#[fg=colour241]} '

set -g status-right '\
#[default,fg=colour237,bold] \
#[fg=colour3,bg=colour237,bold] \
#[fg=colour15,bg=colour237,bold] #(date +"%a %b %e, %l:%M %p" | sed "s/  / /g")\
#[fg=colour3,bg=colour237,bold] \
'

setw -g window-status-current-fg colour241
setw -g window-status-current-bg colour6
setw -g window-status-current-attr bold
setw -g window-status-fg colour251
setw -g window-status-bg colour237
setw -g window-status-attr none
setw -g window-status-format '#[fg=colour235,bg=colour237]#[default] #I:#F #[fg=colour237,bg=colour235]'
setw -g window-status-current-format '#[fg=colour235,bg=colour6]#[default] #I:#F #[fg=colour6,bg=colour235]'
# # }
