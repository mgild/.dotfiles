#   my_ps: List processes owned by my user:
#   ------------------------------------------------------------
my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }


#  Show symlinks in given directory
#   -----------------------------------------------------
function lsym() {
    for link in $(find ${1:-"$(pwd)"} -maxdepth 1 -type l); do
        echo "$link -> $(readlink $link)";
    done;
}

#  Show directories in given directory (including symlink dirs)
#   -----------------------------------------------------
function lsd() {
    ls -p | grep /;
}

min() {
    ((($1 < $2)) && echo $1) || echo $2
}
# Quick up n levels
# Requires: n >= 0
up() {
    # default to 1
    declare -i d=${@:-1};
    # ensure non-negative
    (($d < 0)) && (>&2 echo "up: Error: negative value provided") && return 1;
    # remove last d directories from pwd, append "/" in case result is empty
    cd "$(pwd | sed -E 's;(/[^/]*){0,'$d'}$;;')/";
}

zman() {
    PAGER="less -g -s '+/^       "$1"'" command man zshall
}

# Better man
# Find man page for builtin commands easily
# If not a builtin, works like normal man
man() {
    command man "$@" 2&> /dev/null;
    if [[ $? -eq 0 ]]; then
        return 0;
    fi;
    vartype=$(type "$@");
    if [[ $vartype == *"shell builtin" || $vartype == *"reserved word" ]]; then
        #command man zshbuiltins | less -p "^       $@ ";
        zman | less -p "^       $@ ";
        return 0;
    fi;
    echo "No manual entry for $@"
    return 1;
}

#   A good way to be annoying
#   ------------------------------------------------------------
export BLINK_START='\033[5m'
export BLINK_END='\033[0m'
blink() {
    echo -en $BLINK_START
    while IFS= read -r line; do
        echo -e $line | sed 's/'$(echo "\[0m")/$(echo "\[0m$BLINK_START")'/g';
    done
}


# Security checks
alias checkrootkits="sudo rkhunter --update; sudo rkhunter --propupd; sudo rkhunter --check"

# nullpointer url shortener
short() {
    if [[ -z $1 ]]; then
        return 1;
    fi
    link=$(curl -s -F"shorten=$*" https://0x0.st | sed 's;https://;;g')
    echo $link "copied to clipboard" && printf $link | pbcopy
}

#   weather: pass your city or zip code, and it returns the weather!
#   USAGE - weather cleveland
#         OR
#         weather 44106
#   WARNING - city and zip code args may yield inaccurate/different results.
#   ------------------------------------------------------
weather() { curl wttr.in/"$1"; }

# split string into multiple lines(array). Supports regex
split(){
    awk -F "$1" '{ for (i=1; i<=NF;++i){print $i;} }'
}

# join input lines on pattern
join() {
    sep=''
    while read data; do
        echo -n $sep$data;
        sep=$1;
    done;
    echo;
}

isset() {
    which "$@" &> /dev/null
}

# run commands in the background
background() {
    nohup zsh -c "$@" &
}

grep_dir() {
    grep -RnisI "$@" * --color=always
}

qaz() {
    echo 'q w e rt | yu i o p'
    echo 'a s d fg | hj k l ;'
    echo 'z x c vb | nm , . /'
}

code_test() {
    range=($(echo {1..7} {30..36} {40..47} {90..97} {100..107} | split ' '))
    echo "Code 0 (color reset): [0m"
    for i in $range; print "\e[${i}mCode: $i -- [${i}m\e[0m"
}

color_test () {
    for code in {000..255}; do
        print -P -- "$code: %F{$code}Test%f %K{$code}Test%k";
    done
}

function termcolors () {
    print TERM
    print -P "Foreground: >█<"
    print -P "Background: >%S█%s<\n"
    print "      0 1 2 3 4 5 6 7"
    for b (0 1)
    do
        printf "%d %2d " $b $(( 8 * b ))
        for r (0 1 2 3 4 5 6 7)
        do
            c=$(( 8 * b + r ))
            print -nP "%K{$c}  %k"
        done
        printf " %2d\n" $(( 8 * b + 7 ))
    done

    print

    print RGB
    for r (0 1 2 3 4 5)
    do
        print "$r $(( 16 + 36 * r )) - $(( 16 + 36 * r + 35 ))\n       0 1 2 3 4 5"
        for g (0 1 2 3 4 5)
        do
            printf "%d %3d " $g $(( 16 + 36 * r + 6 * g ))
            for b (0 1 2 3 4 5)
            do
                c=$(( 16 + 36 * r + 6 * g + b ))
                print -nP "%K{$c}  %k"
            done
            printf " %3d\n" $(( 16 + 36 * r + 6 * g + 5))
        done
        print
    done

    print

    print GRAY
    for g in $(seq 0 23)
    do
        c=$(( 232 + g ))
        printf "%2d %3d " $g $c
        print -P "%K{$c}  %k"
    done
}


map_hops(){
    iponmap -t $(sudo mtr -r -b -l $1  2> /dev/null |\
        grep '^h' |\
        sed 's/.* //g' |\
        join ' '
    );
}

# Get number of visible characters in a string
num_visible(){
    t=$(echo "$1" | perl -pe 's/\x1b\[[^m]+m//g')
    echo ${#t}
}


# fairly slow
get_cursor_row() {
    exec < /dev/tty;
    oldstty=$(stty -g);
    stty raw -echo min 0;
    echo -en "\033[6n" > /dev/tty;
    IFS=';' read -r -d R -A pos;
    stty $oldstty;
    echo ${pos[1]:2}
}

gen_MAC() {
    local s=""; repeat 6; do echo -n "$s"; printf "%02X" "$(( $RANDOM % 256 ))"; s=":"; done;
    echo
}

randomize_MAC() {
    set_MAC "$(gen_MAC)";
}

set_MAC() {
    sudo ifconfig en0 ether "$1";
    sudo ifconfig en0 down;
    sudo ifconfig en0 up;
}

find_gale() {
    local result="$(nmap 192.168.8{6,4,2}.1 -p 22 -oG - | awk '/Up$/{print $2}')"
    [[ ${#result} -eq 0 ]] && return 1 || echo $result
}

# g4 info
get_g4set() {
    g4 set $1
}

find_owners() {
    local cwd=`pwd`
    while true; do
        ls 'OWNERS' &> /dev/null && pwd && cat OWNERS
        if [[ `pwd` == '/' ]]; then
            cd $cwd
            return;
        fi;
        cd ..
    done
}

git_root() {
    git rev-parse --show-toplevel
}

gale_sh() {
    which sshpass &> /dev/null || sudo apt-get install sshpass
    sshpass -f "${HOME}/gale_psswd.txt" ssh root@$(find_gale) -oStrictHostKeyChecking=no -t 'bash;exit'
}

# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# fbr - checkout git branch (including remote branches)
fbrr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fcoc - checkout git commit
fcoc() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

unalias z
# fzf menu presented when no arguments given to z
z() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _last_z_args="$@"
    _z "$@"
  fi
}

# Relauch zz with its arguments being the previous command
zz() {
  cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf -q "$_last_z_args")"
}
